{"ast":null,"code":"import BigNumber from 'bignumber.js';\nimport { ethers } from 'ethers';\nBigNumber.config({\n  EXPONENTIAL_AT: 1000,\n  DECIMAL_PLACES: 80\n});\nconst GAS_LIMIT = {\n  STAKING: {\n    DEFAULT: 200000,\n    SNX: 850000\n  }\n};\nexport const getMasterChefAddress = sushi => {\n  return sushi && sushi.masterChefAddress;\n};\nexport const getSushiAddress = sushi => {\n  return sushi && sushi.sushiAddress;\n};\nexport const getWethContract = sushi => {\n  return sushi && sushi.contracts && sushi.contracts.weth;\n};\nexport const getMasterChefContract = sushi => {\n  return sushi && sushi.contracts && sushi.contracts.masterChef;\n};\nexport const getSushiContract = sushi => {\n  return sushi && sushi.contracts && sushi.contracts.sushi;\n};\nexport const getFarms = sushi => {\n  return sushi ? sushi.contracts.pools.map(({\n    pid,\n    name,\n    symbol,\n    icon,\n    tokenAddress,\n    tokenSymbol,\n    tokenContract,\n    lpAddress,\n    lpContract\n  }) => ({\n    pid,\n    id: symbol,\n    name,\n    lpToken: symbol,\n    lpTokenAddress: lpAddress,\n    lpContract,\n    tokenAddress,\n    tokenSymbol,\n    tokenContract,\n    earnToken: 'sushi',\n    earnTokenAddress: sushi.contracts.sushi.options.address,\n    icon\n  })) : [];\n};\nexport const getPoolWeight = async (masterChefContract, pid) => {\n  const {\n    allocPoint\n  } = await masterChefContract.methods.poolInfo(pid).call();\n  const totalAllocPoint = await masterChefContract.methods.totalAllocPoint().call();\n  return new BigNumber(allocPoint).div(new BigNumber(totalAllocPoint));\n};\nexport const getEarned = async (masterChefContract, pid, account) => {\n  return masterChefContract.methods.pendingSushi(pid, account).call();\n};\nexport const getTotalLPWethValue = async (masterChefContract, wethContract, lpContract, tokenContract, pid) => {\n  // Get balance of the token address\n  const tokenAmountWholeLP = await tokenContract.methods.balanceOf(lpContract.options.address).call();\n  const tokenDecimals = await tokenContract.methods.decimals().call(); // Get the share of lpContract that masterChefContract owns\n\n  const balance = await lpContract.methods.balanceOf(masterChefContract.options.address).call(); // Convert that into the portion of total lpContract = p1\n\n  const totalSupply = await lpContract.methods.totalSupply().call(); // Get total weth value for the lpContract = w1\n\n  const lpContractWeth = await wethContract.methods.balanceOf(lpContract.options.address).call(); // Return p1 * w1 * 2\n\n  const portionLp = new BigNumber(balance).div(new BigNumber(totalSupply));\n  const lpWethWorth = new BigNumber(lpContractWeth);\n  const totalLpWethValue = portionLp.times(lpWethWorth).times(new BigNumber(2)); // Calculate\n\n  const tokenAmount = new BigNumber(tokenAmountWholeLP).times(portionLp).div(new BigNumber(10).pow(tokenDecimals));\n  const wethAmount = new BigNumber(lpContractWeth).times(portionLp).div(new BigNumber(10).pow(18));\n  return {\n    tokenAmount,\n    wethAmount,\n    totalWethValue: totalLpWethValue.div(new BigNumber(10).pow(18)),\n    tokenPriceInWeth: wethAmount.div(tokenAmount),\n    poolWeight: await getPoolWeight(masterChefContract, pid)\n  };\n};\nexport const approve = async (lpContract, masterChefContract, account) => {\n  return lpContract.methods.approve(masterChefContract.options.address, ethers.constants.MaxUint256).send({\n    from: account\n  });\n};\nexport const getSushiSupply = async sushi => {\n  return new BigNumber((await sushi.contracts.sushi.methods.totalSupply().call()));\n};\nexport const stake = async (masterChefContract, pid, amount, account) => {\n  return masterChefContract.methods.deposit(pid, new BigNumber(amount).times(new BigNumber(10).pow(18)).toString()).send({\n    from: account\n  }).on('transactionHash', tx => {\n    console.log(tx);\n    return tx.transactionHash;\n  });\n};\nexport const unstake = async (masterChefContract, pid, amount, account) => {\n  return masterChefContract.methods.withdraw(pid, new BigNumber(amount).times(new BigNumber(10).pow(18)).toString()).send({\n    from: account\n  }).on('transactionHash', tx => {\n    console.log(tx);\n    return tx.transactionHash;\n  });\n};\nexport const harvest = async (masterChefContract, pid, account) => {\n  return masterChefContract.methods.deposit(pid, '0').send({\n    from: account\n  }).on('transactionHash', tx => {\n    console.log(tx);\n    return tx.transactionHash;\n  });\n};\nexport const getStaked = async (masterChefContract, pid, account) => {\n  try {\n    const {\n      amount\n    } = await masterChefContract.methods.userInfo(pid, account).call();\n    return new BigNumber(amount);\n  } catch {\n    return new BigNumber(0);\n  }\n};\nexport const redeem = async (masterChefContract, account) => {\n  let now = new Date().getTime() / 1000;\n\n  if (now >= 1597172400) {\n    return masterChefContract.methods.exit().send({\n      from: account\n    }).on('transactionHash', tx => {\n      console.log(tx);\n      return tx.transactionHash;\n    });\n  } else {\n    alert('pool not active');\n  }\n};","map":{"version":3,"sources":["E:/Levinswap/levinswap-farm/src/sushi/utils.js"],"names":["BigNumber","ethers","config","EXPONENTIAL_AT","DECIMAL_PLACES","GAS_LIMIT","STAKING","DEFAULT","SNX","getMasterChefAddress","sushi","masterChefAddress","getSushiAddress","sushiAddress","getWethContract","contracts","weth","getMasterChefContract","masterChef","getSushiContract","getFarms","pools","map","pid","name","symbol","icon","tokenAddress","tokenSymbol","tokenContract","lpAddress","lpContract","id","lpToken","lpTokenAddress","earnToken","earnTokenAddress","options","address","getPoolWeight","masterChefContract","allocPoint","methods","poolInfo","call","totalAllocPoint","div","getEarned","account","pendingSushi","getTotalLPWethValue","wethContract","tokenAmountWholeLP","balanceOf","tokenDecimals","decimals","balance","totalSupply","lpContractWeth","portionLp","lpWethWorth","totalLpWethValue","times","tokenAmount","pow","wethAmount","totalWethValue","tokenPriceInWeth","poolWeight","approve","constants","MaxUint256","send","from","getSushiSupply","stake","amount","deposit","toString","on","tx","console","log","transactionHash","unstake","withdraw","harvest","getStaked","userInfo","redeem","now","Date","getTime","exit","alert"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,cAAtB;AACA,SAASC,MAAT,QAAuB,QAAvB;AAEAD,SAAS,CAACE,MAAV,CAAiB;AACfC,EAAAA,cAAc,EAAE,IADD;AAEfC,EAAAA,cAAc,EAAE;AAFD,CAAjB;AAKA,MAAMC,SAAS,GAAG;AAChBC,EAAAA,OAAO,EAAE;AACPC,IAAAA,OAAO,EAAE,MADF;AAEPC,IAAAA,GAAG,EAAE;AAFE;AADO,CAAlB;AAOA,OAAO,MAAMC,oBAAoB,GAAIC,KAAD,IAAW;AAC7C,SAAOA,KAAK,IAAIA,KAAK,CAACC,iBAAtB;AACD,CAFM;AAGP,OAAO,MAAMC,eAAe,GAAIF,KAAD,IAAW;AACxC,SAAOA,KAAK,IAAIA,KAAK,CAACG,YAAtB;AACD,CAFM;AAGP,OAAO,MAAMC,eAAe,GAAIJ,KAAD,IAAW;AACxC,SAAOA,KAAK,IAAIA,KAAK,CAACK,SAAf,IAA4BL,KAAK,CAACK,SAAN,CAAgBC,IAAnD;AACD,CAFM;AAIP,OAAO,MAAMC,qBAAqB,GAAIP,KAAD,IAAW;AAC9C,SAAOA,KAAK,IAAIA,KAAK,CAACK,SAAf,IAA4BL,KAAK,CAACK,SAAN,CAAgBG,UAAnD;AACD,CAFM;AAGP,OAAO,MAAMC,gBAAgB,GAAIT,KAAD,IAAW;AACzC,SAAOA,KAAK,IAAIA,KAAK,CAACK,SAAf,IAA4BL,KAAK,CAACK,SAAN,CAAgBL,KAAnD;AACD,CAFM;AAIP,OAAO,MAAMU,QAAQ,GAAIV,KAAD,IAAW;AACjC,SAAOA,KAAK,GACRA,KAAK,CAACK,SAAN,CAAgBM,KAAhB,CAAsBC,GAAtB,CACE,CAAC;AACCC,IAAAA,GADD;AAECC,IAAAA,IAFD;AAGCC,IAAAA,MAHD;AAICC,IAAAA,IAJD;AAKCC,IAAAA,YALD;AAMCC,IAAAA,WAND;AAOCC,IAAAA,aAPD;AAQCC,IAAAA,SARD;AASCC,IAAAA;AATD,GAAD,MAUO;AACLR,IAAAA,GADK;AAELS,IAAAA,EAAE,EAAEP,MAFC;AAGLD,IAAAA,IAHK;AAILS,IAAAA,OAAO,EAAER,MAJJ;AAKLS,IAAAA,cAAc,EAAEJ,SALX;AAMLC,IAAAA,UANK;AAOLJ,IAAAA,YAPK;AAQLC,IAAAA,WARK;AASLC,IAAAA,aATK;AAULM,IAAAA,SAAS,EAAE,OAVN;AAWLC,IAAAA,gBAAgB,EAAE1B,KAAK,CAACK,SAAN,CAAgBL,KAAhB,CAAsB2B,OAAtB,CAA8BC,OAX3C;AAYLZ,IAAAA;AAZK,GAVP,CADF,CADQ,GA2BR,EA3BJ;AA4BD,CA7BM;AA+BP,OAAO,MAAMa,aAAa,GAAG,OAAOC,kBAAP,EAA2BjB,GAA3B,KAAmC;AAC9D,QAAM;AAAEkB,IAAAA;AAAF,MAAiB,MAAMD,kBAAkB,CAACE,OAAnB,CAA2BC,QAA3B,CAAoCpB,GAApC,EAAyCqB,IAAzC,EAA7B;AACA,QAAMC,eAAe,GAAG,MAAML,kBAAkB,CAACE,OAAnB,CAC3BG,eAD2B,GAE3BD,IAF2B,EAA9B;AAGA,SAAO,IAAI5C,SAAJ,CAAcyC,UAAd,EAA0BK,GAA1B,CAA8B,IAAI9C,SAAJ,CAAc6C,eAAd,CAA9B,CAAP;AACD,CANM;AAQP,OAAO,MAAME,SAAS,GAAG,OAAOP,kBAAP,EAA2BjB,GAA3B,EAAgCyB,OAAhC,KAA4C;AACnE,SAAOR,kBAAkB,CAACE,OAAnB,CAA2BO,YAA3B,CAAwC1B,GAAxC,EAA6CyB,OAA7C,EAAsDJ,IAAtD,EAAP;AACD,CAFM;AAIP,OAAO,MAAMM,mBAAmB,GAAG,OACjCV,kBADiC,EAEjCW,YAFiC,EAGjCpB,UAHiC,EAIjCF,aAJiC,EAKjCN,GALiC,KAM9B;AACH;AACA,QAAM6B,kBAAkB,GAAG,MAAMvB,aAAa,CAACa,OAAd,CAC9BW,SAD8B,CACpBtB,UAAU,CAACM,OAAX,CAAmBC,OADC,EAE9BM,IAF8B,EAAjC;AAGA,QAAMU,aAAa,GAAG,MAAMzB,aAAa,CAACa,OAAd,CAAsBa,QAAtB,GAAiCX,IAAjC,EAA5B,CALG,CAMH;;AACA,QAAMY,OAAO,GAAG,MAAMzB,UAAU,CAACW,OAAX,CACnBW,SADmB,CACTb,kBAAkB,CAACH,OAAnB,CAA2BC,OADlB,EAEnBM,IAFmB,EAAtB,CAPG,CAUH;;AACA,QAAMa,WAAW,GAAG,MAAM1B,UAAU,CAACW,OAAX,CAAmBe,WAAnB,GAAiCb,IAAjC,EAA1B,CAXG,CAYH;;AACA,QAAMc,cAAc,GAAG,MAAMP,YAAY,CAACT,OAAb,CAC1BW,SAD0B,CAChBtB,UAAU,CAACM,OAAX,CAAmBC,OADH,EAE1BM,IAF0B,EAA7B,CAbG,CAgBH;;AACA,QAAMe,SAAS,GAAG,IAAI3D,SAAJ,CAAcwD,OAAd,EAAuBV,GAAvB,CAA2B,IAAI9C,SAAJ,CAAcyD,WAAd,CAA3B,CAAlB;AACA,QAAMG,WAAW,GAAG,IAAI5D,SAAJ,CAAc0D,cAAd,CAApB;AACA,QAAMG,gBAAgB,GAAGF,SAAS,CAACG,KAAV,CAAgBF,WAAhB,EAA6BE,KAA7B,CAAmC,IAAI9D,SAAJ,CAAc,CAAd,CAAnC,CAAzB,CAnBG,CAoBH;;AACA,QAAM+D,WAAW,GAAG,IAAI/D,SAAJ,CAAcoD,kBAAd,EACjBU,KADiB,CACXH,SADW,EAEjBb,GAFiB,CAEb,IAAI9C,SAAJ,CAAc,EAAd,EAAkBgE,GAAlB,CAAsBV,aAAtB,CAFa,CAApB;AAIA,QAAMW,UAAU,GAAG,IAAIjE,SAAJ,CAAc0D,cAAd,EAChBI,KADgB,CACVH,SADU,EAEhBb,GAFgB,CAEZ,IAAI9C,SAAJ,CAAc,EAAd,EAAkBgE,GAAlB,CAAsB,EAAtB,CAFY,CAAnB;AAGA,SAAO;AACLD,IAAAA,WADK;AAELE,IAAAA,UAFK;AAGLC,IAAAA,cAAc,EAAEL,gBAAgB,CAACf,GAAjB,CAAqB,IAAI9C,SAAJ,CAAc,EAAd,EAAkBgE,GAAlB,CAAsB,EAAtB,CAArB,CAHX;AAILG,IAAAA,gBAAgB,EAAEF,UAAU,CAACnB,GAAX,CAAeiB,WAAf,CAJb;AAKLK,IAAAA,UAAU,EAAE,MAAM7B,aAAa,CAACC,kBAAD,EAAqBjB,GAArB;AAL1B,GAAP;AAOD,CAzCM;AA2CP,OAAO,MAAM8C,OAAO,GAAG,OAAOtC,UAAP,EAAmBS,kBAAnB,EAAuCQ,OAAvC,KAAmD;AACxE,SAAOjB,UAAU,CAACW,OAAX,CACJ2B,OADI,CACI7B,kBAAkB,CAACH,OAAnB,CAA2BC,OAD/B,EACwCrC,MAAM,CAACqE,SAAP,CAAiBC,UADzD,EAEJC,IAFI,CAEC;AAAEC,IAAAA,IAAI,EAAEzB;AAAR,GAFD,CAAP;AAGD,CAJM;AAMP,OAAO,MAAM0B,cAAc,GAAG,MAAOhE,KAAP,IAAiB;AAC7C,SAAO,IAAIV,SAAJ,EAAc,MAAMU,KAAK,CAACK,SAAN,CAAgBL,KAAhB,CAAsBgC,OAAtB,CAA8Be,WAA9B,GAA4Cb,IAA5C,EAApB,EAAP;AACD,CAFM;AAIP,OAAO,MAAM+B,KAAK,GAAG,OAAOnC,kBAAP,EAA2BjB,GAA3B,EAAgCqD,MAAhC,EAAwC5B,OAAxC,KAAoD;AACvE,SAAOR,kBAAkB,CAACE,OAAnB,CACJmC,OADI,CAEHtD,GAFG,EAGH,IAAIvB,SAAJ,CAAc4E,MAAd,EAAsBd,KAAtB,CAA4B,IAAI9D,SAAJ,CAAc,EAAd,EAAkBgE,GAAlB,CAAsB,EAAtB,CAA5B,EAAuDc,QAAvD,EAHG,EAKJN,IALI,CAKC;AAAEC,IAAAA,IAAI,EAAEzB;AAAR,GALD,EAMJ+B,EANI,CAMD,iBANC,EAMmBC,EAAD,IAAQ;AAC7BC,IAAAA,OAAO,CAACC,GAAR,CAAYF,EAAZ;AACA,WAAOA,EAAE,CAACG,eAAV;AACD,GATI,CAAP;AAUD,CAXM;AAaP,OAAO,MAAMC,OAAO,GAAG,OAAO5C,kBAAP,EAA2BjB,GAA3B,EAAgCqD,MAAhC,EAAwC5B,OAAxC,KAAoD;AACzE,SAAOR,kBAAkB,CAACE,OAAnB,CACJ2C,QADI,CAEH9D,GAFG,EAGH,IAAIvB,SAAJ,CAAc4E,MAAd,EAAsBd,KAAtB,CAA4B,IAAI9D,SAAJ,CAAc,EAAd,EAAkBgE,GAAlB,CAAsB,EAAtB,CAA5B,EAAuDc,QAAvD,EAHG,EAKJN,IALI,CAKC;AAAEC,IAAAA,IAAI,EAAEzB;AAAR,GALD,EAMJ+B,EANI,CAMD,iBANC,EAMmBC,EAAD,IAAQ;AAC7BC,IAAAA,OAAO,CAACC,GAAR,CAAYF,EAAZ;AACA,WAAOA,EAAE,CAACG,eAAV;AACD,GATI,CAAP;AAUD,CAXM;AAYP,OAAO,MAAMG,OAAO,GAAG,OAAO9C,kBAAP,EAA2BjB,GAA3B,EAAgCyB,OAAhC,KAA4C;AACjE,SAAOR,kBAAkB,CAACE,OAAnB,CACJmC,OADI,CACItD,GADJ,EACS,GADT,EAEJiD,IAFI,CAEC;AAAEC,IAAAA,IAAI,EAAEzB;AAAR,GAFD,EAGJ+B,EAHI,CAGD,iBAHC,EAGmBC,EAAD,IAAQ;AAC7BC,IAAAA,OAAO,CAACC,GAAR,CAAYF,EAAZ;AACA,WAAOA,EAAE,CAACG,eAAV;AACD,GANI,CAAP;AAOD,CARM;AAUP,OAAO,MAAMI,SAAS,GAAG,OAAO/C,kBAAP,EAA2BjB,GAA3B,EAAgCyB,OAAhC,KAA4C;AACnE,MAAI;AACF,UAAM;AAAE4B,MAAAA;AAAF,QAAa,MAAMpC,kBAAkB,CAACE,OAAnB,CACtB8C,QADsB,CACbjE,GADa,EACRyB,OADQ,EAEtBJ,IAFsB,EAAzB;AAGA,WAAO,IAAI5C,SAAJ,CAAc4E,MAAd,CAAP;AACD,GALD,CAKE,MAAM;AACN,WAAO,IAAI5E,SAAJ,CAAc,CAAd,CAAP;AACD;AACF,CATM;AAWP,OAAO,MAAMyF,MAAM,GAAG,OAAOjD,kBAAP,EAA2BQ,OAA3B,KAAuC;AAC3D,MAAI0C,GAAG,GAAG,IAAIC,IAAJ,GAAWC,OAAX,KAAuB,IAAjC;;AACA,MAAIF,GAAG,IAAI,UAAX,EAAuB;AACrB,WAAOlD,kBAAkB,CAACE,OAAnB,CACJmD,IADI,GAEJrB,IAFI,CAEC;AAAEC,MAAAA,IAAI,EAAEzB;AAAR,KAFD,EAGJ+B,EAHI,CAGD,iBAHC,EAGmBC,EAAD,IAAQ;AAC7BC,MAAAA,OAAO,CAACC,GAAR,CAAYF,EAAZ;AACA,aAAOA,EAAE,CAACG,eAAV;AACD,KANI,CAAP;AAOD,GARD,MAQO;AACLW,IAAAA,KAAK,CAAC,iBAAD,CAAL;AACD;AACF,CAbM","sourcesContent":["import BigNumber from 'bignumber.js'\r\nimport { ethers } from 'ethers'\r\n\r\nBigNumber.config({\r\n  EXPONENTIAL_AT: 1000,\r\n  DECIMAL_PLACES: 80,\r\n})\r\n\r\nconst GAS_LIMIT = {\r\n  STAKING: {\r\n    DEFAULT: 200000,\r\n    SNX: 850000,\r\n  },\r\n}\r\n\r\nexport const getMasterChefAddress = (sushi) => {\r\n  return sushi && sushi.masterChefAddress\r\n}\r\nexport const getSushiAddress = (sushi) => {\r\n  return sushi && sushi.sushiAddress\r\n}\r\nexport const getWethContract = (sushi) => {\r\n  return sushi && sushi.contracts && sushi.contracts.weth\r\n}\r\n\r\nexport const getMasterChefContract = (sushi) => {\r\n  return sushi && sushi.contracts && sushi.contracts.masterChef\r\n}\r\nexport const getSushiContract = (sushi) => {\r\n  return sushi && sushi.contracts && sushi.contracts.sushi\r\n}\r\n\r\nexport const getFarms = (sushi) => {\r\n  return sushi\r\n    ? sushi.contracts.pools.map(\r\n        ({\r\n          pid,\r\n          name,\r\n          symbol,\r\n          icon,\r\n          tokenAddress,\r\n          tokenSymbol,\r\n          tokenContract,\r\n          lpAddress,\r\n          lpContract,\r\n        }) => ({\r\n          pid,\r\n          id: symbol,\r\n          name,\r\n          lpToken: symbol,\r\n          lpTokenAddress: lpAddress,\r\n          lpContract,\r\n          tokenAddress,\r\n          tokenSymbol,\r\n          tokenContract,\r\n          earnToken: 'sushi',\r\n          earnTokenAddress: sushi.contracts.sushi.options.address,\r\n          icon,\r\n        }),\r\n      )\r\n    : []\r\n}\r\n\r\nexport const getPoolWeight = async (masterChefContract, pid) => {\r\n  const { allocPoint } = await masterChefContract.methods.poolInfo(pid).call()\r\n  const totalAllocPoint = await masterChefContract.methods\r\n    .totalAllocPoint()\r\n    .call()\r\n  return new BigNumber(allocPoint).div(new BigNumber(totalAllocPoint))\r\n}\r\n\r\nexport const getEarned = async (masterChefContract, pid, account) => {\r\n  return masterChefContract.methods.pendingSushi(pid, account).call()\r\n}\r\n\r\nexport const getTotalLPWethValue = async (\r\n  masterChefContract,\r\n  wethContract,\r\n  lpContract,\r\n  tokenContract,\r\n  pid,\r\n) => {\r\n  // Get balance of the token address\r\n  const tokenAmountWholeLP = await tokenContract.methods\r\n    .balanceOf(lpContract.options.address)\r\n    .call()\r\n  const tokenDecimals = await tokenContract.methods.decimals().call()\r\n  // Get the share of lpContract that masterChefContract owns\r\n  const balance = await lpContract.methods\r\n    .balanceOf(masterChefContract.options.address)\r\n    .call()\r\n  // Convert that into the portion of total lpContract = p1\r\n  const totalSupply = await lpContract.methods.totalSupply().call()\r\n  // Get total weth value for the lpContract = w1\r\n  const lpContractWeth = await wethContract.methods\r\n    .balanceOf(lpContract.options.address)\r\n    .call()\r\n  // Return p1 * w1 * 2\r\n  const portionLp = new BigNumber(balance).div(new BigNumber(totalSupply))\r\n  const lpWethWorth = new BigNumber(lpContractWeth)\r\n  const totalLpWethValue = portionLp.times(lpWethWorth).times(new BigNumber(2))\r\n  // Calculate\r\n  const tokenAmount = new BigNumber(tokenAmountWholeLP)\r\n    .times(portionLp)\r\n    .div(new BigNumber(10).pow(tokenDecimals))\r\n\r\n  const wethAmount = new BigNumber(lpContractWeth)\r\n    .times(portionLp)\r\n    .div(new BigNumber(10).pow(18))\r\n  return {\r\n    tokenAmount,\r\n    wethAmount,\r\n    totalWethValue: totalLpWethValue.div(new BigNumber(10).pow(18)),\r\n    tokenPriceInWeth: wethAmount.div(tokenAmount),\r\n    poolWeight: await getPoolWeight(masterChefContract, pid),\r\n  }\r\n}\r\n\r\nexport const approve = async (lpContract, masterChefContract, account) => {\r\n  return lpContract.methods\r\n    .approve(masterChefContract.options.address, ethers.constants.MaxUint256)\r\n    .send({ from: account })\r\n}\r\n\r\nexport const getSushiSupply = async (sushi) => {\r\n  return new BigNumber(await sushi.contracts.sushi.methods.totalSupply().call())\r\n}\r\n\r\nexport const stake = async (masterChefContract, pid, amount, account) => {\r\n  return masterChefContract.methods\r\n    .deposit(\r\n      pid,\r\n      new BigNumber(amount).times(new BigNumber(10).pow(18)).toString(),\r\n    )\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      console.log(tx)\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const unstake = async (masterChefContract, pid, amount, account) => {\r\n  return masterChefContract.methods\r\n    .withdraw(\r\n      pid,\r\n      new BigNumber(amount).times(new BigNumber(10).pow(18)).toString(),\r\n    )\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      console.log(tx)\r\n      return tx.transactionHash\r\n    })\r\n}\r\nexport const harvest = async (masterChefContract, pid, account) => {\r\n  return masterChefContract.methods\r\n    .deposit(pid, '0')\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      console.log(tx)\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const getStaked = async (masterChefContract, pid, account) => {\r\n  try {\r\n    const { amount } = await masterChefContract.methods\r\n      .userInfo(pid, account)\r\n      .call()\r\n    return new BigNumber(amount)\r\n  } catch {\r\n    return new BigNumber(0)\r\n  }\r\n}\r\n\r\nexport const redeem = async (masterChefContract, account) => {\r\n  let now = new Date().getTime() / 1000\r\n  if (now >= 1597172400) {\r\n    return masterChefContract.methods\r\n      .exit()\r\n      .send({ from: account })\r\n      .on('transactionHash', (tx) => {\r\n        console.log(tx)\r\n        return tx.transactionHash\r\n      })\r\n  } else {\r\n    alert('pool not active')\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}